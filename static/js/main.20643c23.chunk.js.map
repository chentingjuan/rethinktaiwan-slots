{"version":3,"sources":["data.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["data","location","thing","feeling","Object","keys","rawData","map","teamId","i","App","useState","activeIds","setActiveIds","superRandomMode","setSuperRandomMode","handleButtonClicked","a","deleteActiveData","newActiveIds","key","currentIds","push","getRandomInt","length","newActiveId","max","Math","floor","random","renderRawData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PASeA,GCTA,I,MDAF,CACX,MAAO,CAAC,6CAAW,iCAAS,oDAC5B,MAAO,CAAC,qEAAe,iCAAS,8FAChC,MAAO,CAAC,6CAAW,uCAAU,sEAC7B,MAAO,CAAC,6CAAW,mDAAY,gEAC/B,IAAO,CAAC,uCAAU,+DAAc,+EAChC,IAAO,CAAC,uCAAU,uCAAU,0EED1BA,EAAO,CAAEC,SAAU,GAAIC,MAAO,GAAIC,QAAS,IAC/CC,OAAOC,KAAKC,GAASC,KAAI,SAACC,EAAQC,GAMhCT,EAAKC,SAASO,GAAUF,EAAQE,GAAQ,GACxCR,EAAKE,MAAMM,GAAUF,EAAQE,GAAQ,GACrCR,EAAKG,QAAQK,GAAUF,EAAQE,GAAQ,MAOzC,IAyGeE,EAzGH,WAAO,IAAD,EACkBC,mBAAS,MAD3B,mBACTC,EADS,KACEC,EADF,OAE8BF,oBAAS,GAFvC,mBAETG,EAFS,KAEQC,EAFR,KAMVC,EAAmB,uCAAG,gCAAAC,EAAA,sEACpBC,IADoB,OAEvBJ,GACGK,EAAe,GACnBf,OAAOC,KAAKL,GAAMO,KAAI,SAAAa,GACpB,IAAMC,EAAajB,OAAOC,KAAKL,EAAKoB,IACpCD,EAAaG,KAAKD,EAAWE,EAAaF,EAAWG,aAEvDX,EAAaM,KAEPE,EAAajB,OAAOC,KAAKL,EAAKC,UAC9BwB,EAAcJ,EAAWE,EAAaF,EAAWG,SACvDX,EAAa,CAACY,EAAaA,EAAaA,KAZhB,2CAAH,qDAgBnBP,EAAmB,WACpBN,WACMZ,EAAKC,SAASW,EAAU,WACxBZ,EAAKE,MAAMU,EAAU,WACrBZ,EAAKG,QAAQS,EAAU,MAI5BW,EAAe,SAACG,GAAD,OAASC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAE9DI,EAAgB1B,OAAOC,KAAKC,GAASC,KAAI,SAACC,EAAQC,GAAT,OASjD,4BANA,+BAEA,0FAEA,uFAEA,6FAEE,OA2DF,0CANA,4CAjDA,0EAMA,4CAJA,6CAEA,yDAEA,4EAEA,kCAeA,6CAVA,mDAHA,IAGA,2CAFA,IACA,oCACA,kDAKA,mDAHA,IAGA,2CADA,wCACA,mDAKA,mDAHA,IAGA,2CADA,wCACA,sDAWA,6CANA,mDADA,IACA,mDAGA,mDADA,IACA,mDAGA,mDADA,IACA,oDAeA,kDAbA,IACA,EACA,+GAGA,8CAIA,oJAIA,iHAEA,6BAEA,oEAEA,oCC/GesB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20643c23.chunk.js","sourcesContent":["const data = {\n  \"000\": [\"在苗栗的農田裡\", \"帶大家跳舞\", \"朋友們都愛上自己\"],\n  \"011\": [\"在茫茫大海的網路社群中\", \"決定要放棄\", \"青少年更懂怎麼保護自己的性行為\"],\n  \"022\": [\"在新竹的菜園裡\", \"帶大家摘野菜\", \"青少年都能認識菜的種類\"],\n  \"039\": [\"在小學的教室裡\", \"介紹月經貧窮議題\", \"小學生們更懂尊重彼此\"],\n  \"110\": [\"在動物收容所\", \"和動物收容所所長談判\", \"動物收容所的人員能更理解***\"],\n  \"255\": [\"在我的房間裡\", \"寫拉霸的程式\", \"PD青年有一個有趣的開幕式\"],\n}\n\nexport default data","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react'\nimport logo from './logo.svg'\nimport './App.scss'\nimport rawData from './data'\n\nlet data = { location: {}, thing: {}, feeling: {} }\nObject.keys(rawData).map((teamId, i) => {\n  // data[teamId] = {\n  //   \"location\": { visited: false, value: rawData[teamId][0] },\n  //   \"thing\": { visited: false, value: rawData[teamId][1] },\n  //   \"feeling\": { visited: false, value: rawData[teamId][2] }\n  // }\n  data.location[teamId] = rawData[teamId][0]\n  data.thing[teamId] = rawData[teamId][1]\n  data.feeling[teamId] = rawData[teamId][2]\n  //   \"location\": { visited: false, value: rawData[teamId][0] },\n  //   \"thing\": { visited: false, value: rawData[teamId][1] },\n  //   \"feeling\": { visited: false, value: rawData[teamId][2] }\n  // }\n})\n\nconst App = () => {\n  const [activeIds, setActiveIds] = useState(null)\n  const [superRandomMode, setSuperRandomMode] = useState(false)\n  // console.log(rawData)\n  // console.log(data)\n\n  const handleButtonClicked = async () => {\n    await deleteActiveData()\n    if(superRandomMode) {\n      let newActiveIds = [];\n      Object.keys(data).map(key => {\n        const currentIds = Object.keys(data[key])\n        newActiveIds.push(currentIds[getRandomInt(currentIds.length)])\n      });\n      setActiveIds(newActiveIds)\n    } else {\n      const currentIds = Object.keys(data.location)\n      const newActiveId = currentIds[getRandomInt(currentIds.length)]\n      setActiveIds([newActiveId, newActiveId, newActiveId])\n    }\n  }\n\n  const deleteActiveData = () => {\n    if(activeIds) {\n      delete data.location[activeIds[0]]\n      delete data.thing[activeIds[1]]\n      delete data.feeling[activeIds[2]]\n    }\n  }\n\n  const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max))\n\n  const renderRawData = Object.keys(rawData).map((teamId, i) => pug`\n    tr\n      td #{teamId}\n      \n      td(className=activeIds&&activeIds[0]===teamId ? \"active\" : !data.location[teamId] ? \"empty\" : \"\") #{rawData[teamId][0]}\n      \n      td(className=activeIds&&activeIds[1]===teamId ? \"active\" : !data.thing[teamId] ? \"empty\" : \"\") #{rawData[teamId][1]}\n      \n      td(className=activeIds&&activeIds[2]===teamId ? \"active\" : !data.feeling[teamId] ? \"empty\" : \"\") #{rawData[teamId][2]}\n  `)\n\n  return pug`\n    .App\n      .slots\n        h2 迴響議題拉霸機\n        .title\n          div 地點\n          \n          div 實際作為\n\n          div 重要人物的感受\n            \n        if(activeIds && Object.keys(data.location).length)\n          .screen\n            .item-wrapper \n              .item  \n                span #{activeIds[0]}\n                span #{data.location[activeIds[0]]}\n\n            .item-wrapper \n              .item\n                span #{activeIds[1]} \n                span #{data.thing[activeIds[1]]} \n            \n            .item-wrapper \n              .item\n                span #{activeIds[2]} \n                span #{data.feeling[activeIds[2]]} \n        \n        else\n          .screen\n            .item-wrapper \n              .item ???\n\n            .item-wrapper \n              .item ???\n            \n            .item-wrapper \n              .item ???\n\n        .control-bar \n          if(activeIds)\n            .remain 剩下 #{Object.keys(data.location).length-1} 回合\n\n          else\n            .remain\n\n          button(\n            onClick=()=>setSuperRandomMode(true) \n            disabled=superRandomMode||Object.keys(data.location).length<=1) 超級混合模式\n\n          button(\n            onClick=handleButtonClicked\n            disabled=Object.keys(data.location).length<=1) 下一回合 \n               \n      hr\n\n      h4 全部的資料：\n\n      table #{renderRawData}\n  `\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}